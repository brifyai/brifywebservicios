// Script de diagn√≥stico corregido para verificar watch channels
// Ejecutar en la consola del navegador despu√©s de comprar un plan
// VERSI√ìN CORREGIDA - Usa credenciales directas de Supabase

// Funci√≥n para cargar Supabase desde CDN si no est√° disponible
const loadSupabaseLibrary = async () => {
  if (typeof window.supabase !== 'undefined') {
    return true;
  }
  
  console.log('üì¶ Cargando librer√≠a de Supabase desde CDN...');
  
  return new Promise((resolve) => {
    const script = document.createElement('script');
    script.src = 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2';
    script.onload = () => {
      console.log('‚úÖ Librer√≠a de Supabase cargada exitosamente');
      resolve(true);
    };
    script.onerror = () => {
      console.error('‚ùå Error cargando librer√≠a de Supabase');
      resolve(false);
    };
    document.head.appendChild(script);
  });
};

// Obtener la instancia de Supabase desde la aplicaci√≥n React
const getSupabaseInstance = () => {
  // Intentar obtener desde el contexto global de React
  if (window.React && window.React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) {
    const reactFiber = document.querySelector('#root')._reactInternalFiber ||
                      document.querySelector('#root')._reactInternals;
    if (reactFiber) {
      // Buscar en el √°rbol de componentes
      let current = reactFiber;
      while (current) {
        if (current.memoizedProps && current.memoizedProps.supabase) {
          return current.memoizedProps.supabase;
        }
        current = current.child || current.sibling || current.return;
      }
    }
  }
  
  // Fallback: crear una nueva instancia
  console.log('‚ö†Ô∏è Creando nueva instancia de Supabase...');
  const { createClient } = window.supabase || {};
  if (createClient) {
    return createClient(
      process.env.REACT_APP_SUPABASE_URL,
      process.env.REACT_APP_SUPABASE_ANON_KEY
    );
  }
  
  return null;
};

// Funci√≥n para obtener Supabase de manera m√°s directa
const getSupabase = async () => {
  // Intentar desde window primero
  if (window.supabaseClient) {
    return window.supabaseClient;
  }
  
  // Intentar desde m√≥dulos importados
  if (window.__SUPABASE_CLIENT__) {
    return window.__SUPABASE_CLIENT__;
  }
  
  // Cargar librer√≠a si no est√° disponible
  const libraryLoaded = await loadSupabaseLibrary();
  if (!libraryLoaded) {
    console.error('‚ùå No se pudo cargar la librer√≠a de Supabase');
    return null;
  }
  
  // Crear instancia directamente con credenciales hardcodeadas
  const supabaseUrl = 'https://leoyybfbnjajkktprhro.supabase.co';
  const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imxlb3l5YmZibmphamtrdHByaHJvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4MTQ0MTYsImV4cCI6MjA2NDM5MDQxNn0.VfJoDIHgXB1k4kwgndmr2yLNDeDBBIrOVsbqaSWrjHU';
  
  console.log('üîß Creando instancia de Supabase con credenciales directas...');
  
  // Verificar si tenemos acceso a la librer√≠a de Supabase
  if (typeof window.supabase !== 'undefined' && window.supabase.createClient) {
    const client = window.supabase.createClient(supabaseUrl, supabaseKey);
    console.log('‚úÖ Cliente de Supabase creado exitosamente');
    return client;
  }
  
  // Fallback: intentar con createClient global
  if (typeof window.createClient !== 'undefined') {
    const client = window.createClient(supabaseUrl, supabaseKey);
    console.log('‚úÖ Cliente de Supabase creado exitosamente (fallback)');
    return client;
  }
  
  console.error('‚ùå No se pudo crear el cliente de Supabase');
  return null;
};

// 1. Verificar si hay watch channels en la base de datos
async function checkWatchChannels() {
  try {
    const supabase = await getSupabase();
    if (!supabase) {
      console.error('‚ùå No se pudo obtener la instancia de Supabase');
      console.log('üí° Soluci√≥n: Aseg√∫rate de estar en la p√°gina de la aplicaci√≥n y que est√© cargada');
      return;
    }
    
    const { data, error } = await supabase
      .from('drive_watch_channels')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(5)
    
    if (error) {
      console.error('‚ùå Error consultando watch channels:', error)
      return
    }
    
    console.log('üìä Watch channels encontrados:', data)
    
    if (data && data.length > 0) {
      const latestChannel = data[0]
      console.log('üîç √öltimo watch channel creado:', {
        id: latestChannel.id,
        channel_id: latestChannel.channel_id,
        folder_id: latestChannel.folder_id,
        user_id: latestChannel.user_id,
        is_active: latestChannel.is_active,
        webhook_url: latestChannel.webhook_url,
        expiration: latestChannel.expiration,
        created_at: latestChannel.created_at
      })
      
      // Verificar si el canal est√° activo y no ha expirado
      const now = new Date()
      const expiration = latestChannel.expiration ? new Date(latestChannel.expiration) : null
      
      if (!latestChannel.is_active) {
        console.warn('‚ö†Ô∏è El watch channel est√° marcado como inactivo')
      }
      
      if (expiration && expiration < now) {
        console.warn('‚ö†Ô∏è El watch channel ha expirado:', expiration)
        console.log('üí° Soluci√≥n: Renovar el watch channel')
      }
      
      if (latestChannel.is_active && (!expiration || expiration > now)) {
        console.log('‚úÖ El watch channel est√° activo y v√°lido')
        
        // Verificar si la URL del webhook es correcta
        const expectedWebhookUrl = 'https://n8n-service-aintelligence.captain.maquinaintelligence.xyz/webhook/3db9b1f5-fdc7-4976-bacb-9802dff27135'
        if (latestChannel.webhook_url !== expectedWebhookUrl) {
          console.warn('‚ö†Ô∏è URL del webhook no coincide:', {
            actual: latestChannel.webhook_url,
            expected: expectedWebhookUrl
          })
        } else {
          console.log('‚úÖ URL del webhook es correcta')
        }
      }
    } else {
      console.warn('‚ö†Ô∏è No se encontraron watch channels')
      console.log('üí° Soluci√≥n: Comprar un plan para crear un watch channel')
    }
  } catch (error) {
    console.error('‚ùå Error en checkWatchChannels:', error)
  }
}

// 2. Verificar credenciales de Google Drive
async function checkGoogleCredentials() {
  try {
    const supabase = await getSupabase();
    if (!supabase) {
      console.error('‚ùå No se pudo obtener la instancia de Supabase');
      return;
    }
    
    const { data: { user } } = await supabase.auth.getUser()
    if (!user) {
      console.error('‚ùå Usuario no autenticado')
      return
    }
    
    const { data, error } = await supabase
      .from('user_credentials')
      .select('google_access_token, google_refresh_token')
      .eq('user_id', user.id)
      .single()
    
    if (error) {
      console.error('‚ùå Error consultando credenciales:', error)
      console.log('üí° Soluci√≥n: Reconectar cuenta de Google Drive')
      return
    }
    
    if (data) {
      console.log('üîë Credenciales de Google encontradas:', {
        has_access_token: !!data.google_access_token,
        has_refresh_token: !!data.google_refresh_token
      })
      
      // Probar el token haciendo una llamada a la API
      if (data.google_access_token) {
        await testGoogleApiAccess(data.google_access_token)
      }
    } else {
      console.warn('‚ö†Ô∏è No se encontraron credenciales de Google')
      console.log('üí° Soluci√≥n: Conectar cuenta de Google Drive en configuraci√≥n')
    }
  } catch (error) {
    console.error('‚ùå Error en checkGoogleCredentials:', error)
  }
}

// 3. Probar acceso a Google Drive API
async function testGoogleApiAccess(accessToken) {
  try {
    console.log('üß™ Probando acceso a Google Drive API...')
    
    const response = await fetch('https://www.googleapis.com/drive/v3/about?fields=user', {
      headers: {
        'Authorization': `Bearer ${accessToken}`
      }
    })
    
    if (response.ok) {
      const data = await response.json()
      console.log('‚úÖ Acceso a Google Drive API exitoso:', data.user.emailAddress)
    } else {
      const error = await response.text()
      console.error('‚ùå Error en Google Drive API:', response.status, error)
      
      if (response.status === 401) {
        console.log('üí° Soluci√≥n: Token expirado, necesita renovaci√≥n')
      } else if (response.status === 403) {
        console.log('üí° Soluci√≥n: Permisos insuficientes, verificar scopes')
      }
    }
  } catch (error) {
    console.error('‚ùå Error probando Google Drive API:', error)
  }
}

// 4. Verificar webhook URL accesibilidad
async function testWebhookUrl() {
  try {
    console.log('üß™ Probando accesibilidad del webhook...')
    
    const webhookUrl = 'https://n8n-service-aintelligence.captain.maquinaintelligence.xyz/webhook/3db9b1f5-fdc7-4976-bacb-9802dff27135'
    
    // Hacer una petici√≥n GET para verificar que el endpoint responde
    const response = await fetch(webhookUrl, {
      method: 'GET',
      mode: 'no-cors' // Para evitar problemas de CORS
    })
    
    console.log('üì° Webhook URL responde (status no disponible por CORS)')
    console.log('‚úÖ El webhook parece estar accesible')
    
  } catch (error) {
    console.error('‚ùå Error probando webhook URL:', error)
    console.log('üí° Soluci√≥n: Verificar que n8n est√© funcionando y la URL sea correcta')
  }
}

// 5. Verificar configuraci√≥n de carpeta administrador
async function checkAdminFolder() {
  try {
    const supabase = await getSupabase();
    if (!supabase) {
      console.error('‚ùå No se pudo obtener la instancia de Supabase');
      return;
    }
    
    const { data: { user } } = await supabase.auth.getUser()
    if (!user) {
      console.error('‚ùå Usuario no autenticado')
      return
    }
    
    const { data, error } = await supabase
      .from('carpeta_administrador')
      .select('*')
      .eq('user_id', user.id)
      .single()
    
    if (error) {
      console.error('‚ùå Error consultando carpeta administrador:', error)
      console.log('üí° Soluci√≥n: Comprar un plan para crear carpeta administrador')
      return
    }
    
    if (data) {
      console.log('üìÅ Carpeta administrador encontrada:', {
        id: data.id,
        id_drive_carpeta: data.id_drive_carpeta,
        correo: data.correo,
        plan_name: data.plan_name,
        created_at: data.created_at
      })
      
      // Verificar que el folder_id coincida con el watch channel
      const { data: watchChannels } = await supabase
        .from('drive_watch_channels')
        .select('folder_id')
        .eq('user_id', user.id)
        .eq('is_active', true)
      
      if (watchChannels && watchChannels.length > 0) {
        const matchingChannel = watchChannels.find(ch => ch.folder_id === data.id_drive_carpeta)
        if (matchingChannel) {
          console.log('‚úÖ Watch channel configurado para la carpeta administrador')
        } else {
          console.warn('‚ö†Ô∏è No hay watch channel para la carpeta administrador')
          console.log('üí° Soluci√≥n: Recrear watch channel para la carpeta')
        }
      }
    } else {
      console.warn('‚ö†Ô∏è No se encontr√≥ carpeta administrador')
    }
  } catch (error) {
    console.error('‚ùå Error en checkAdminFolder:', error)
  }
}

// 6. Verificar notificaciones recientes
async function checkRecentNotifications() {
  try {
    const supabase = await getSupabase();
    if (!supabase) {
      console.error('‚ùå No se pudo obtener la instancia de Supabase');
      return;
    }
    
    const { data, error } = await supabase
      .from('drive_notifications')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(10)
    
    if (error) {
      console.error('‚ùå Error consultando notificaciones:', error)
      return
    }
    
    console.log('üì¨ Notificaciones recientes:', data)
    
    if (data && data.length > 0) {
      console.log('‚úÖ Se encontraron', data.length, 'notificaciones')
      
      const pendingCount = data.filter(n => !n.processed).length
      console.log('üìã Notificaciones pendientes:', pendingCount)
      
      // Mostrar tipos de eventos recibidos
      const eventTypes = [...new Set(data.map(n => n.resource_state))]
      console.log('üìä Tipos de eventos recibidos:', eventTypes)
    } else {
      console.warn('‚ö†Ô∏è No se encontraron notificaciones')
      console.log('üí° Esto indica que Google Drive no est√° enviando notificaciones')
    }
  } catch (error) {
    console.error('‚ùå Error en checkRecentNotifications:', error)
  }
}

// 7. Probar la creaci√≥n manual de un watch channel
async function testWatchChannelCreation() {
  try {
    console.log('üß™ Probando creaci√≥n manual de watch channel...')
    
    const supabase = await getSupabase();
    if (!supabase) {
      console.error('‚ùå No se pudo obtener la instancia de Supabase');
      return;
    }
    
    // Obtener usuario actual
    const { data: { user } } = await supabase.auth.getUser()
    if (!user) {
      console.error('‚ùå Usuario no autenticado')
      return
    }
    
    // Obtener credenciales
    const { data: credentials } = await supabase
      .from('user_credentials')
      .select('google_access_token')
      .eq('user_id', user.id)
      .single()
    
    if (!credentials || !credentials.google_access_token) {
      console.error('‚ùå No hay credenciales de Google disponibles')
      return
    }
    
    // Obtener carpeta de administrador
    const { data: adminFolder } = await supabase
      .from('carpeta_administrador')
      .select('id_drive_carpeta')
      .eq('user_id', user.id)
      .single()
    
    if (!adminFolder || !adminFolder.id_drive_carpeta) {
      console.error('‚ùå No se encontr√≥ carpeta de administrador')
      return
    }
    
    console.log('üìã Datos para crear watch channel:', {
      userId: user.id,
      folderId: adminFolder.id_drive_carpeta,
      hasAccessToken: !!credentials.google_access_token
    })
    
    // Probar llamada directa a Google Drive API
    const channelId = 'test-' + Date.now()
    const webhookUrl = 'https://n8n-service-aintelligence.captain.maquinaintelligence.xyz/webhook/3db9b1f5-fdc7-4976-bacb-9802dff27135'
    
    console.log('üì° Enviando petici√≥n a Google Drive API...')
    
    const response = await fetch(`https://www.googleapis.com/drive/v3/files/${adminFolder.id_drive_carpeta}/watch`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${credentials.google_access_token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        id: channelId,
        type: 'web_hook',
        address: webhookUrl,
        token: user.id
      })
    })
    
    if (response.ok) {
      const data = await response.json()
      console.log('‚úÖ Watch channel creado exitosamente en Google Drive:', data)
      
      // Cancelar inmediatamente para no interferir
      await fetch('https://www.googleapis.com/drive/v3/channels/stop', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${credentials.google_access_token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          id: channelId,
          resourceId: data.resourceId
        })
      })
      
      console.log('üßπ Watch channel de prueba cancelado')
    } else {
      const error = await response.text()
      console.error('‚ùå Error creando watch channel en Google Drive:', response.status, error)
      
      if (response.status === 401) {
        console.log('üí° Soluci√≥n: Token expirado o inv√°lido')
      } else if (response.status === 403) {
        console.log('üí° Soluci√≥n: Permisos insuficientes o dominio no verificado')
      } else if (response.status === 400) {
        console.log('üí° Soluci√≥n: Par√°metros incorrectos en la petici√≥n')
      }
    }
  } catch (error) {
    console.error('‚ùå Error en testWatchChannelCreation:', error)
  }
}

// Funci√≥n principal de diagn√≥stico
async function runDiagnostics() {
  console.log('üîç Iniciando diagn√≥stico completo de watch channels...')
  console.log('=' + '='.repeat(50))
  
  // Inicializar Supabase una vez al principio
  console.log('\nüîß Inicializando conexi√≥n a Supabase...')
  const supabase = await getSupabase();
  if (!supabase) {
    console.error('‚ùå No se pudo conectar a Supabase. Diagn√≥stico cancelado.');
    return;
  }
  
  console.log('\n1Ô∏è‚É£ Verificando watch channels en base de datos...')
  await checkWatchChannels()
  
  console.log('\n2Ô∏è‚É£ Verificando credenciales de Google...')
  await checkGoogleCredentials()
  
  console.log('\n3Ô∏è‚É£ Verificando carpeta administrador...')
  await checkAdminFolder()
  
  console.log('\n4Ô∏è‚É£ Probando accesibilidad del webhook...')
  await testWebhookUrl()
  
  console.log('\n5Ô∏è‚É£ Verificando notificaciones recientes...')
  await checkRecentNotifications()
  
  console.log('\nüîç Diagn√≥stico completado')
  console.log('=' + '='.repeat(50))
  console.log('\nüß™ Para probar la creaci√≥n manual de un watch channel:')
  console.log('   testWatchChannelCreation()')
  console.log('\nüìö Problemas comunes y soluciones:')
  console.log('   ‚Ä¢ Domain verification: Verificar en Google Search Console')
  console.log('   ‚Ä¢ Permisos: Verificar scopes de Google Drive API')
  console.log('   ‚Ä¢ Webhook: Verificar que n8n est√© funcionando')
  console.log('   ‚Ä¢ Token: Renovar credenciales de Google Drive')
}

// Funci√≥n para configurar Supabase manualmente
function setupSupabase(url, anonKey) {
  localStorage.setItem('supabase_url', url);
  localStorage.setItem('supabase_anon_key', anonKey);
  console.log('‚úÖ Configuraci√≥n de Supabase guardada');
  console.log('üîÑ Recarga la p√°gina y ejecuta el diagn√≥stico nuevamente');
}

// Exportar funciones para uso en consola
window.runDiagnostics = runDiagnostics
window.checkWatchChannels = checkWatchChannels
window.checkGoogleCredentials = checkGoogleCredentials
window.testWatchChannelCreation = testWatchChannelCreation
window.checkRecentNotifications = checkRecentNotifications
window.checkAdminFolder = checkAdminFolder
window.testWebhookUrl = testWebhookUrl
window.setupSupabase = setupSupabase

console.log('üìã Script de diagn√≥stico CORREGIDO cargado con credenciales directas.')
console.log('‚úÖ Supabase configurado autom√°ticamente - no necesitas configuraci√≥n adicional')
console.log('üöÄ Ejecuta runDiagnostics() para comenzar el diagn√≥stico completo.')
console.log('üß™ O ejecuta testWatchChannelCreation() para probar creaci√≥n de watch channels')
console.log('üìä Funciones disponibles: checkWatchChannels, checkGoogleCredentials, checkAdminFolder, etc.')