// Script para simular el escenario espec√≠fico del nuevo usuario
const fetch = require('node-fetch');

// Simular diferentes escenarios que podr√≠an ocurrir con un nuevo usuario
const newUserScenarios = [
  {
    name: 'Escenario 1: Webhook recibe llamada pero sin headers de Google Drive',
    data: {
      body: {
        timestamp: new Date().toISOString(),
        source: 'webhook_call'
      }
    }
  },
  {
    name: 'Escenario 2: Headers de Google Drive pero channel ID no existe en BD',
    data: {
      headers: {
        'x-goog-channel-id': 'nuevo-usuario-channel-inexistente',
        'x-goog-resource-state': 'update',
        'x-goog-changed': 'children',
        'x-goog-message-number': '1',
        'x-goog-resource-uri': 'https://www.googleapis.com/drive/v3/files/nuevo-archivo-id?alt=json'
      }
    }
  },
  {
    name: 'Escenario 3: Datos completamente vac√≠os (como reporta el usuario)',
    data: null
  },
  {
    name: 'Escenario 4: Objeto vac√≠o',
    data: {}
  },
  {
    name: 'Escenario 5: Solo metadata de n8n sin datos de Google Drive',
    data: {
      meta: {
        instanceId: 'n8n-instance'
      },
      timestamp: new Date().toISOString()
    }
  },
  {
    name: 'Escenario 6: Headers malformados',
    data: {
      'x-goog-channel-id': '',
      'x-goog-resource-state': '',
      'x-goog-changed': ''
    }
  }
];

// Funci√≥n que simula exactamente el c√≥digo de n8n_debug_version.js
function simulateN8nDebugCode(scenario) {
  console.log(`\nüîç SIMULANDO: ${scenario.name}`);
  console.log('=' .repeat(60));
  
  try {
    // Simular $input.all()
    const inputData = scenario.data ? [{ json: scenario.data }] : [];
    console.log('üì• $input.all() simulado:', JSON.stringify(inputData, null, 2));
    
    if (inputData.length === 0) {
      console.log('‚ùå No hay datos de entrada - $input.all() est√° vac√≠o');
      return { error: 'No input data', isEmpty: true };
    }
    
    // Simular $input.all()[0].json
    const webhookData = inputData[0].json;
    console.log('üìã webhookData:', JSON.stringify(webhookData, null, 2));
    
    if (!webhookData) {
      console.log('‚ùå webhookData es null o undefined');
      return { error: 'webhookData is null', isEmpty: true };
    }
    
    if (typeof webhookData !== 'object') {
      console.log('‚ùå webhookData no es un objeto');
      return { error: 'webhookData is not object', isEmpty: true };
    }
    
    const keys = Object.keys(webhookData);
    console.log('üîë Keys disponibles:', keys);
    
    if (keys.length === 0) {
      console.log('‚ùå webhookData est√° vac√≠o');
      return { error: 'webhookData is empty object', isEmpty: true };
    }
    
    // Buscar headers
    let headers = null;
    
    // Opci√≥n 1: headers directos
    if (webhookData.headers) {
      headers = webhookData.headers;
      console.log('‚úÖ Headers encontrados en webhookData.headers');
    }
    // Opci√≥n 2: headers en body
    else if (webhookData.body && webhookData.body.headers) {
      headers = webhookData.body.headers;
      console.log('‚úÖ Headers encontrados en webhookData.body.headers');
    }
    // Opci√≥n 3: headers de Google Drive directamente en el objeto
    else {
      const googleHeaders = {};
      for (const key in webhookData) {
        if (key.startsWith('x-goog-')) {
          googleHeaders[key] = webhookData[key];
        }
      }
      
      if (Object.keys(googleHeaders).length > 0) {
        headers = googleHeaders;
        console.log('‚úÖ Headers de Google Drive encontrados directamente');
      }
    }
    
    console.log('üìã Headers extra√≠dos:', JSON.stringify(headers, null, 2));
    
    if (!headers) {
      console.log('‚ùå No se encontraron headers de Google Drive');
      return { error: 'No Google Drive headers found', isEmpty: true };
    }
    
    const channelId = headers['x-goog-channel-id'];
    console.log('üÜî Channel ID:', channelId);
    
    if (!channelId || channelId.trim() === '') {
      console.log('‚ùå Channel ID vac√≠o o inv√°lido');
      return { error: 'Invalid or empty channel ID', isEmpty: true };
    }
    
    // Si llegamos aqu√≠, tenemos datos v√°lidos
    const result = {
      success: true,
      channelId: channelId,
      resourceState: headers['x-goog-resource-state'],
      changed: headers['x-goog-changed'],
      messageNumber: headers['x-goog-message-number'],
      resourceUri: headers['x-goog-resource-uri']
    };
    
    console.log('‚úÖ Procesamiento exitoso');
    console.log('üì§ Resultado:', JSON.stringify(result, null, 2));
    
    return result;
    
  } catch (error) {
    console.error('üí• Error durante procesamiento:', error.message);
    console.error('üìö Stack trace:', error.stack);
    return { error: error.message, isEmpty: true };
  }
}

// Funci√≥n para analizar por qu√© el output est√° vac√≠o
function analyzeEmptyOutput(result, scenarioName) {
  console.log(`\nüî¨ AN√ÅLISIS DE OUTPUT VAC√çO - ${scenarioName}`);
  console.log('-' .repeat(60));
  
  if (result.isEmpty) {
    console.log('‚ùå CONFIRMADO: Este escenario produce output vac√≠o');
    console.log('üîç Raz√≥n:', result.error);
    
    // Sugerencias espec√≠ficas
    if (result.error.includes('No input data')) {
      console.log('üí° SOLUCI√ìN: Verificar que el webhook de n8n est√© recibiendo datos');
      console.log('   - Revisar configuraci√≥n del webhook trigger en n8n');
      console.log('   - Verificar que Google Drive est√© enviando notificaciones');
    }
    else if (result.error.includes('webhookData is null')) {
      console.log('üí° SOLUCI√ìN: El webhook recibe la llamada pero sin datos JSON');
      console.log('   - Verificar Content-Type en la configuraci√≥n del webhook');
      console.log('   - Revisar si Google Drive est√° enviando body vac√≠o');
    }
    else if (result.error.includes('empty object')) {
      console.log('üí° SOLUCI√ìN: El webhook recibe un objeto vac√≠o {}');
      console.log('   - Esto indica que Google Drive no est√° enviando headers');
      console.log('   - Verificar configuraci√≥n del watch channel');
    }
    else if (result.error.includes('No Google Drive headers')) {
      console.log('üí° SOLUCI√ìN: Los datos no contienen headers de Google Drive');
      console.log('   - Verificar que el webhook est√© configurado para Google Drive');
      console.log('   - Revisar si hay un proxy o middleware modificando los headers');
    }
    else if (result.error.includes('Invalid or empty channel ID')) {
      console.log('üí° SOLUCI√ìN: Channel ID vac√≠o o inv√°lido');
      console.log('   - Verificar que el watch channel est√© activo en Google Drive');
      console.log('   - Revisar configuraci√≥n del channel en la base de datos');
    }
  } else {
    console.log('‚úÖ Este escenario NO produce output vac√≠o');
    console.log('üìä Datos procesados correctamente');
  }
}

// Ejecutar todas las simulaciones
async function runNewUserDiagnostic() {
  console.log('üö® DIAGN√ìSTICO: Output vac√≠o en Code Node para nuevo usuario');
  console.log('=' .repeat(80));
  
  let emptyOutputCount = 0;
  
  for (const scenario of newUserScenarios) {
    const result = simulateN8nDebugCode(scenario);
    analyzeEmptyOutput(result, scenario.name);
    
    if (result.isEmpty) {
      emptyOutputCount++;
    }
    
    console.log('\n' + '=' .repeat(80));
  }
  
  console.log('\nüìä RESUMEN DEL DIAGN√ìSTICO:');
  console.log(`- Escenarios que producen output vac√≠o: ${emptyOutputCount}/${newUserScenarios.length}`);
  console.log(`- Escenarios exitosos: ${newUserScenarios.length - emptyOutputCount}/${newUserScenarios.length}`);
  
  console.log('\nüéØ PASOS RECOMENDADOS PARA EL NUEVO USUARIO:');
  console.log('1. Reemplazar el Code Node actual con n8n_debug_version.js');
  console.log('2. Ejecutar una prueba y revisar los logs detallados');
  console.log('3. Verificar que el watch channel est√© activo en la base de datos');
  console.log('4. Confirmar que Google Drive est√© enviando notificaciones al webhook correcto');
  console.log('5. Revisar la configuraci√≥n del webhook trigger en n8n');
}

// Ejecutar el diagn√≥stico
runNewUserDiagnostic();