// Script para diagnosticar problemas espec√≠ficos de webhooks de Google Drive
// Basado en problemas comunes identificados en la documentaci√≥n y Stack Overflow

// Funci√≥n para verificar domain verification
async function checkDomainVerification() {
  console.log('üîç Verificando Domain Verification...')
  
  const webhookUrl = 'https://n8n-service-aintelligence.captain.maquinaintelligence.xyz/webhook/3db9b1f5-fdc7-4976-bacb-9802dff27135'
  const domain = new URL(webhookUrl).hostname
  
  console.log('üìç Dominio del webhook:', domain)
  console.log('‚ö†Ô∏è IMPORTANTE: Verificar que este dominio est√© registrado en:')
  console.log('   1. Google Cloud Console > Domain Verification')
  console.log('   2. Google Search Console')
  console.log('   3. Que el certificado SSL sea v√°lido')
  
  // Verificar SSL
  try {
    const response = await fetch(webhookUrl, { method: 'HEAD' })
    console.log('‚úÖ Webhook responde correctamente')
  } catch (error) {
    console.error('‚ùå Error al acceder al webhook:', error.message)
  }
}

// Funci√≥n para verificar permisos del service account
async function checkServiceAccountPermissions() {
  console.log('\nüîç Verificando permisos del Service Account...')
  
  const supabase = await getSupabase()
  const user = supabase.auth.getUser ? await supabase.auth.getUser() : await supabase.auth.user()
  const actualUser = user?.data?.user || user
  
  if (!actualUser) {
    console.error('‚ùå Usuario no autenticado')
    return
  }
  
  // Obtener credenciales
  const { data: credentials } = await supabase
    .from('user_credentials')
    .select('google_access_token, google_refresh_token')
    .eq('user_id', actualUser.id)
    .single()
    
  if (!credentials?.google_access_token) {
    console.error('‚ùå No hay token de acceso de Google')
    return
  }
  
  // Obtener carpeta administrador
  const { data: adminFolder } = await supabase
    .from('carpeta_administrador')
    .select('id_drive_carpeta')
    .eq('user_id', actualUser.id)
    .single()
    
  if (!adminFolder?.id_drive_carpeta) {
    console.error('‚ùå No hay carpeta administrador')
    return
  }
  
  console.log('üìÅ Carpeta a monitorear:', adminFolder.id_drive_carpeta)
  
  // Verificar permisos en la carpeta
  try {
    const response = await fetch(`https://www.googleapis.com/drive/v3/files/${adminFolder.id_drive_carpeta}?fields=id,name,owners,permissions`, {
      headers: {
        'Authorization': `Bearer ${credentials.google_access_token}`,
        'Content-Type': 'application/json'
      }
    })
    
    if (response.ok) {
      const folderInfo = await response.json()
      console.log('‚úÖ Acceso a carpeta confirmado:', folderInfo.name)
      console.log('üë• Propietarios:', folderInfo.owners?.map(o => o.emailAddress))
      console.log('üîê Permisos:', folderInfo.permissions?.length || 0, 'permisos configurados')
    } else {
      console.error('‚ùå Error al acceder a la carpeta:', response.status, response.statusText)
    }
  } catch (error) {
    console.error('‚ùå Error verificando permisos:', error.message)
  }
}

// Funci√≥n para verificar el formato del watch channel
async function checkWatchChannelFormat() {
  console.log('\nüîç Verificando formato del watch channel...')
  
  const supabase = await getSupabase()
  const user = supabase.auth.getUser ? await supabase.auth.getUser() : await supabase.auth.user()
  const actualUser = user?.data?.user || user
  
  if (!actualUser) {
    console.error('‚ùå Usuario no autenticado')
    return
  }
  
  // Obtener watch channel actual
  const { data: watchChannel } = await supabase
    .from('drive_watch_channels')
    .select('*')
    .eq('user_id', actualUser.id)
    .eq('is_active', true)
    .single()
    
  if (!watchChannel) {
    console.error('‚ùå No hay watch channel activo')
    return
  }
  
  console.log('üìä Watch channel actual:', {
    id: watchChannel.id,
    channel_id: watchChannel.channel_id,
    folder_id: watchChannel.folder_id,
    webhook_url: watchChannel.webhook_url,
    expires_at: watchChannel.expires_at,
    created_at: watchChannel.created_at
  })
  
  // Verificaciones espec√≠ficas
  const issues = []
  
  if (!watchChannel.webhook_url.startsWith('https://')) {
    issues.push('‚ùå Webhook URL debe usar HTTPS')
  }
  
  if (!watchChannel.channel_id || watchChannel.channel_id.length < 10) {
    issues.push('‚ùå Channel ID parece inv√°lido')
  }
  
  if (!watchChannel.folder_id || watchChannel.folder_id.length < 10) {
    issues.push('‚ùå Folder ID parece inv√°lido')
  }
  
  const expiresAt = new Date(watchChannel.expires_at)
  const now = new Date()
  if (expiresAt <= now) {
    issues.push('‚ùå Watch channel ha expirado')
  }
  
  if (issues.length > 0) {
    console.log('‚ö†Ô∏è Problemas encontrados:')
    issues.forEach(issue => console.log('  ', issue))
  } else {
    console.log('‚úÖ Formato del watch channel parece correcto')
  }
}

// Funci√≥n para probar creaci√≥n de watch channel con formato correcto
async function testCorrectWatchChannelCreation() {
  console.log('\nüß™ Probando creaci√≥n de watch channel con formato correcto...')
  
  const supabase = await getSupabase()
  const user = supabase.auth.getUser ? await supabase.auth.getUser() : await supabase.auth.user()
  const actualUser = user?.data?.user || user
  
  if (!actualUser) {
    console.error('‚ùå Usuario no autenticado')
    return
  }
  
  // Obtener credenciales y carpeta
  const { data: credentials } = await supabase
    .from('user_credentials')
    .select('google_access_token')
    .eq('user_id', actualUser.id)
    .single()
    
  const { data: adminFolder } = await supabase
    .from('carpeta_administrador')
    .select('id_drive_carpeta')
    .eq('user_id', actualUser.id)
    .single()
    
  if (!credentials?.google_access_token || !adminFolder?.id_drive_carpeta) {
    console.error('‚ùå Faltan credenciales o carpeta administrador')
    return
  }
  
  // Crear watch channel con formato correcto seg√∫n documentaci√≥n
  const channelId = crypto.randomUUID()
  const watchData = {
    id: channelId,
    type: 'web_hook',
    address: 'https://n8n-service-aintelligence.captain.maquinaintelligence.xyz/webhook/3db9b1f5-fdc7-4976-bacb-9802dff27135',
    // NO incluir resourceId ni resourceUri seg√∫n Stack Overflow
    // Solo id, type y address son necesarios
  }
  
  console.log('üì° Creando watch channel con datos:', watchData)
  
  try {
    const response = await fetch(`https://www.googleapis.com/drive/v3/files/${adminFolder.id_drive_carpeta}/watch`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${credentials.google_access_token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(watchData)
    })
    
    if (response.ok) {
      const result = await response.json()
      console.log('‚úÖ Watch channel creado exitosamente:', result)
      
      // Guardar en base de datos
      const { error } = await supabase
        .from('drive_watch_channels')
        .insert({
          id: crypto.randomUUID(),
          channel_id: result.id,
          folder_id: adminFolder.id_drive_carpeta,
          user_id: actualUser.id,
          webhook_url: watchData.address,
          expires_at: new Date(result.expiration).toISOString(),
          is_active: true
        })
        
      if (error) {
        console.error('‚ùå Error guardando en BD:', error)
      } else {
        console.log('‚úÖ Watch channel guardado en base de datos')
      }
    } else {
      const errorData = await response.text()
      console.error('‚ùå Error creando watch channel:', response.status, errorData)
      
      // Analizar errores espec√≠ficos
      if (errorData.includes('webhookUrlUnauthorized')) {
        console.log('üí° Soluci√≥n: Verificar domain verification en Google Cloud Console')
      }
      if (errorData.includes('insufficientPermissions')) {
        console.log('üí° Soluci√≥n: Verificar permisos del service account')
      }
    }
  } catch (error) {
    console.error('‚ùå Error en la petici√≥n:', error.message)
  }
}

// Funci√≥n principal de diagn√≥stico
async function runWebhookDiagnostics() {
  console.log('üîç Iniciando diagn√≥stico avanzado de webhooks...')
  console.log('='.repeat(60))
  
  await checkDomainVerification()
  await checkServiceAccountPermissions()
  await checkWatchChannelFormat()
  await testCorrectWatchChannelCreation()
  
  console.log('\nüìã RESUMEN DE ACCIONES REQUERIDAS:')
  console.log('1. Verificar domain verification en Google Cloud Console')
  console.log('2. Verificar que el dominio tenga certificado SSL v√°lido')
  console.log('3. Verificar permisos del service account en Google Drive')
  console.log('4. Recrear watch channel si es necesario')
  console.log('5. Probar subiendo un archivo a la carpeta monitoreada')
  
  console.log('\n='.repeat(60))
  console.log('üîç Diagn√≥stico completado')
}

// Funci√≥n auxiliar para obtener Supabase (reutilizar del script anterior)
async function getSupabase() {
  // Para Node.js, usar require en lugar de import din√°mico
  const { createClient } = require('@supabase/supabase-js')
  
  const supabaseUrl = 'https://leoyybfbnjajkktprhro.supabase.co'
  const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imxlb3l5YmZibmphamtrdHByaHJvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4MTQ0MTYsImV4cCI6MjA2NDM5MDQxNn0.VfJoDIHgXB1k4kwgndmr2yLNDeDBBIrOVsbqaSWrjHU'
  
  return createClient(supabaseUrl, supabaseKey)
}

// Ejecutar diagn√≥sticos
console.log('üîç Iniciando diagn√≥stico completo de webhooks de Google Drive...')
runWebhookDiagnostics().catch(console.error)